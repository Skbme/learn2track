#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys

# Hack so you don't have to put the library containing this script in the PYTHONPATH.
sys.path = [os.path.abspath(os.path.join(__file__, '..', '..'))] + sys.path

import argparse
import numpy as np

import nibabel as nib
from dipy.tracking.streamline import length, set_number_of_points

from learn2track import neurotools
from learn2track.utils import Timer


def build_parser():
    DESCRIPTION = ("Display information about datasets.")
    p = argparse.ArgumentParser(description=DESCRIPTION)

    p.add_argument('datasets', metavar='dataset', nargs='+',
                   help='NPZ files, each one containing a datasset (as generated by `process_streamlines.py`).')
    p.add_argument('--step-size', type=float, default=0.5,
                   help='All streamlines will have this step size (in mm).')

    return p


def main():
    parser = build_parser()
    args = parser.parse_args()

    for f in args.datasets:
        with Timer("Normalizing step size of dataset '{}'".format(f)):
            tractography_data = neurotools.TractographyData.load(f)

            t = nib.streamlines.Tractogram(tractography_data.streamlines)
            t.apply_affine(tractography_data.signal.affine)  # Bring streamlines to RAS+mm

            streamlines = t.streamlines
            streamlines._lengths = streamlines._lengths.astype(int)
            streamlines._offsets = streamlines._offsets.astype(int)
            lengths = length(streamlines)
            nb_points = np.ceil(lengths / args.step_size).astype(int)

            # Filter out streamlines shorter than the given step size
            new_streamlines = (set_number_of_points(s, n) for s, n in zip(streamlines, nb_points) if n > 1)

            t = nib.streamlines.Tractogram(new_streamlines)
            t.apply_affine(np.linalg.inv(tractography_data.signal.affine))
            t.affine_to_rasmm = np.eye(4)
            tractography_data.streamlines = t.streamlines

        filename = f[:-4] + "_" + str(args.step_size) + "mm" + f[-4:]
        tractography_data.save(filename)


if __name__ == "__main__":
    main()
